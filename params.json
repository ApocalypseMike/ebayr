{"name":"eBayR","tagline":"eBay Trading API? Arrrr, not so trixie.","body":"# Ebayr\r\n\r\nEbayr is a small gem which makes it a little easier to use the eBay Trading API\r\nwith Ruby.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'ebayr'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install ebayr\r\n\r\n## Usage\r\n\r\nTo use the eBay Trading API, you'll need a developer keyset. Sign up at\r\nhttp://developer.ebay.com if you haven't already done so.\r\n\r\nNext, you'll need to require Ebayr, and tell it to use your keys. You will also\r\nneed to generate an RUName, and get the key for that. (This is all standard\r\nstuff - look at the [eBay developer docs][1] for details).\r\n\r\n```ruby\r\nrequire 'ebayr'\r\n\r\nEbayr.dev_id = \"my-dev-id\"\r\n\r\n# This is only needed if you want to retrieve user tokens\r\nEbayr.authorization_callback_url = \"https://my-site/callback-url\"\r\n\r\nEbayr.auth_token = \"myverylongebayauthtoken\"\r\n\r\nEbayr.app_id = \"my-ebay-app-id\"\r\n\r\nEbayr.cert_id = \"my-ebay-cert-id\"\r\n\r\nEbayr.ru_name = \"my-ebay-ru-name\"\r\n\r\n# Set this to true for testing in the eBay Sandbox (but remember to use the\r\n# appropriate keys!). It's true by default.\r\nEbayr.sandbox = false\r\n```\r\n\r\nNow you're ready to make calls\r\n```ruby\r\nEbayr.call(:GeteBayOfficialTime)\r\nsession = Ebayr.call(:GetSessionID, :RuName => Ebayr.ru_name)[:SessionID]\r\n```\r\n\r\nTo use an authorized user's key, pass in an `auth_token` parameter\r\n```ruby\r\nEbayr.call(:GetOrders, :auth_token => \"another-ebay-auth-token\")\r\n```\r\n\r\n\r\n### Configuration\r\n\r\nEbayr will look for the following Ruby files, and load them *once* in order (if\r\nthey exist) when the module is evaluated:\r\n\r\n1. /etc/ebayr.conf\r\n2. /usr/local/etc/ebayr.conf\r\n3. ~/.ebayr.conf\r\n4. ./.ebayr.conf\r\n\r\nYou can put configuration code in there (such as the variable setting shown\r\nabove). The files should be plain old Ruby.\r\n\r\nIn a Ruby on Rails project, just create a file called\r\nconfig/initializers/ebayr.rb (or something), and put the configuration there. Of\r\ncourse, you should probably not check in these files, if you're using a public\r\nrepository.\r\n\r\n## Testing\r\n\r\n[![Status](https://travis-ci.org/bjjb/ebayr.png?branch=master)](https://travis-ci.org/bjjb/ebayr)\r\n\r\nWhen running test, you generally won't want to use up your API call-limit too\r\nquickly, so it makes sense to stub out calls to the eBay API.\r\n\r\nEbayr test use [Fakeweb][2] to mimic the responses from eBay.\r\n\r\n```ruby\r\nrequire 'ebayr'\r\nrequire 'test/unit'\r\nrequire 'fakeweb'\r\n\r\nclass MyTest < Test::Unit::TestCase\r\n  def setup\r\n    Ebayr.sandbox = true\r\n  end\r\n\r\n  # A very contrived example...\r\n  def test_get_ebay_time\r\n    xml = <<-XML\r\n      <GeteBayOfficialTimeResponse>\r\n        <Ack>Success</Ack>\r\n        <Timestamp>blah</Timestamp>\r\n      </GeteBayOfficialTimeResponse>\r\n    XML\r\n\r\n    FakeWeb.register_uri(:post, Ebayr.uri, :body => xml)\r\n\r\n    time = SomeWrapperThatUsesEbayr.get_ebay_time\r\n    assert_equal 'blah', time\r\n  end\r\nend\r\n\r\nclass SomeWrapperThatUsesEbayr\r\n  def self.get_ebay_time\r\n    hash = Ebayr.call(:GeteBayOfficialTime)\r\n    hash.timestamp\r\n  end\r\nend\r\n```\r\n\r\nSee ['./test/ebayr_test.rb'](test/ebayr_test.rb) for more examples.\r\n\r\nYou need to remember to include Fakeweb in your Gemfile, or Ebayr will complain.\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n[1]: http://developer.ebay.com\r\n[2]: http://fakeweb.rubyforge.org\r\n","google":"UA-49952150-1","note":"Don't delete this file! It's used internally to help with page regeneration."}